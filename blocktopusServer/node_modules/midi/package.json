{
  "name": "midi",
  "version": "0.9.0",
  "scripts": {
    "test": "node test/virtual-loopback-test-automated.js",
    "install": "node-gyp rebuild"
  },
  "main": "midi.js",
  "description": "MIDI hardware IO",
  "author": {
    "name": "Justin Latimer",
    "email": "justinlatimer@gmail.com",
    "url": "http://www.justinlatimer.com/"
  },
  "contributors": [
    {
      "name": "Elijah Insua",
      "email": "tmpvar@gmail.com"
    },
    {
      "name": "Andrew Morton",
      "email": "drewish@katherinehouse.com"
    },
    {
      "name": "Luc Deschenaux",
      "email": "luc.deschenaux@freesurf.ch"
    },
    {
      "name": "Michael Alyn Miller",
      "email": "malyn@strangegizmo.com"
    },
    {
      "name": "Hugo Hromic"
    }
  ],
  "engines": {
    "node": ">=0.8.0"
  },
  "dependencies": {
    "bindings": "*"
  },
  "devDependencies": {
    "mocha": ">= 1.17.x",
    "should": ">= 3.1.x"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/justinlatimer/node-midi.git"
  },
  "gypfile": true,
  "readme": "♪ ♫ ♩ ♬\n\n# node-midi\n\nA node.js wrapper for the RtMidi C++ library that provides realtime MIDI I/O.\nRtMidi supports Linux (ALSA & Jack), Macintosh OS X (CoreMidi), and Windows\n(Multimedia).\n\n## Prerequisites\n\n### OSX\n\n* Some version of Xcode (or Command Line Tools)\n* Python (for node-gyp)\n\n### Windows\n\n* Microsoft Visual C++ (the Express edition works fine)\n* Python (for node-gyp)\n\n### Linux\n\n* A C++ compiler\n* You must have installed and configured ALSA. Without it this module will **NOT** build.\n* Install the libasound2-dev package.\n* Python (for node-gyp)\n\n## Installation\n\nInstallation uses node-gyp and requires Python 2.7.2 or higher.\n\nFrom npm:\n\n    $ npm install midi\n\nFrom source:\n\n    $ git clone https://github.com/justinlatimer/node-midi.git\n    $ cd node-midi/\n    $ npm install\n\n## Usage\n\n### Input\n\n```js\nvar midi = require('midi');\n\n// Set up a new input.\nvar input = new midi.input();\n\n// Count the available input ports.\ninput.getPortCount();\n\n// Get the name of a specified input port.\ninput.getPortName(0);\n\n// Configure a callback.\ninput.on('message', function(deltaTime, message) {\n  console.log('m:' + message + ' d:' + deltaTime);\n});\n\n// Open the first available input port.\ninput.openPort(0);\n\n// Sysex, timing, and active sensing messages are ignored\n// by default. To enable these message types, pass false for\n// the appropriate type in the function below.\n// Order: (Sysex, Timing, Active Sensing)\ninput.ignoreTypes(false, false, false);\n\n// ... receive MIDI messages ...\n\n// Close the port when done.\ninput.closePort();\n```\n\n### Output\n\n```js\nvar midi = require('midi');\n\n// Set up a new output.\nvar output = new midi.output();\n\n// Count the available output ports.\noutput.getPortCount();\n\n// Get the name of a specified output port.\noutput.getPortName(0);\n\n// Open the first available output port.\noutput.openPort(0);\n\n// Send a MIDI message.\noutput.sendMessage([176,22,1]);\n\n// Close the port when done.\noutput.closePort();\n```\n\n### Virtual Ports\n\nInstead of opening a connection to an existing MIDI device, on Mac OS X and\nLinux with ALSA you can create a virtual device that other software may\nconnect to. This can be done simply by calling openVirtualPort(portName) instead\nof openPort(portNumber).\n\n```js\nvar midi = require('midi');\n\n// Set up a new input.\nvar input = new midi.input();\n\n// Configure a callback.\ninput.on('message', function(deltaTime, message) {\n    console.log('m:' + message + ' d:' + deltaTime);\n});\n\n// Create a virtual input port.\ninput.openVirtualPort(\"Test Input\");\n\n// A midi device \"Test Input\" is now available for other\n// software to send messages to.\n\n// ... receive MIDI messages ...\n\n// Close the port when done.\ninput.closePort();\n```\n\nThe same can be done with output ports.\n\n### Streams\n\nYou can also use this library with streams! Here are the interfaces\n\n#### Readable Stream\n\n```js\n// create a readable stream\nvar stream1 = midi.createReadStream();\n\n// createReadStream also accepts an optional `input` param\nvar input = new midi.input();\ninput.openVirtualPort('hello world');\n\nvar stream2 = midi.createReadStream(input)\n\nstream2.pipe(require('fs').createWriteStream('something.bin'));\n```\n\n#### Writable Stream\n\n```js\n// create a writable stream\nvar stream1 = midi.createWriteStream();\n\n// createWriteStream also accepts an optional `output` param\nvar output = new midi.output();\noutput.openVirtualPort('hello again');\n\nvar stream2 = midi.createWriteStream(output);\n\nrequire('fs').createReadStream('something.bin').pipe(stream2);\n```\n\n## References\n\n  * http://music.mcgill.ca/~gary/rtmidi/\n  * http://syskall.com/how-to-write-your-own-native-nodejs-extension\n\n## Maintainers\n\n  * Justin Latimer - [@justinlatimer](https://github.com/justinlatimer)\n  * Elijah Insua - [@tmpvar](https://github.com/tmpvar)\n  * Andrew Morton - [@drewish](https://github.com/drewish)\n\n## Contributors\n\n  * Luc Deschenaux - [@luxigo](https://github.com/luxigo)\n  * Michael Alyn Miller - [@malyn](https://github.com/malyn)\n  * Hugo Hromic - [@hhromic](https://github.com/hhromic)\n\n## License\n\nCopyright (C) 2011 by Justin Latimer.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\nA different license may apply to other software included in this package,\nincluding RtMidi. Please consult their respective license files for the\nterms of their individual licenses.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/justinlatimer/node-midi/issues"
  },
  "homepage": "https://github.com/justinlatimer/node-midi",
  "_id": "midi@0.9.0",
  "_shasum": "44c13df514b43543fa23460760c290feb13d336f",
  "_from": "midi@",
  "_resolved": "https://registry.npmjs.org/midi/-/midi-0.9.0.tgz"
}
